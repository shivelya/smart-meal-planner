name: Build and Deploy Docs

on:
  workflow_run:
    workflows: ["Main Backend CD", "Main Frontend CD"]
    types:
      - completed
  workflow_dispatch:
permissions:
      contents: read
      pages: write
      id-token: write
# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false
jobs:
  build_and_deploy_docs:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    name: Build and Deploy Docs
  
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
          lfs: false

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20' # Specify the Node.js version to use

      - name: Install Frontend Dependencies
        working-directory: ./frontend
        run: npm install

      - name: Generate Frontend Documentation
        working-directory: ./frontend
        run: npx compodoc -p tsconfig.json -d _compodoc

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'

      - name: Restore dependencies
        run: dotnet restore backend/Backend.Tests

      - name: Install report generator
        run: dotnet tool install --global dotnet-reportgenerator-globaltool --version 5.1.21

      - name: Build the test project
        run: dotnet build backend/Backend.Tests --configuration Release --no-restore

      - name: Run unit tests with coverage
        run: dotnet test backend/Backend.Tests --configuration Release --collect:"XPlat Code Coverage"

      - name: Generate code coverage report
        run: reportgenerator \
          -reports:./backend/Backend.Tests/TestResults/**/coverage.cobertura.xml \
          -targetdir:"coveragereport" \
          -reporttypes:Html

      - name: Merge Docs
        run: |
          rm -rf docs
          mkdir -p docs/frontend
          mkdir -p docs/coveragereport
          cp -r ./frontend/_compodoc/* docs/frontend/
          cp -r ./coveragereport/* docs/coveragereport/

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'docs'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4