name: Main Backend CD
  
on:
  push:
    paths:
      - 'backend/**'
      - '.github/workflows/main-backend-cd.yml'
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: read #This is required for actions/checkout

    steps:
      - uses: actions/checkout@v4

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'

      - name: Build with dotnet
        run: dotnet build backend/Backend --configuration Release

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: .net-app
          path: .

  deploy:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write #This is required for requesting the JWT
      contents: read #This is required for actions/checkout

    steps:
      - uses: actions/checkout@v4

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'

      - name: Install EF Core CLI
        run: dotnet tool install --global dotnet-ef

      - name: Add .dotnet tools to PATH
        run: echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      - name: Check for pending migrations
        id: migrations
        run: |
          export DOTNET_CONNECTIONSTRING="Host=${{ secrets.AZURE_DB_HOST }};Database=${{ secrets.AZURE_DB_NAME }};Username=${{ secrets.AZURE_DB_USER }};Password=${{ secrets.AZURE_DB_PASSWORD }};Ssl Mode=Require;Trust Server Certificate=true"
          dotnet ef migrations script \
            --idempotent \
            --output migrations.sql \
            --project backend/Backend/Backend.csproj \
            --startup-project backend/Backend/Backend.csproj

          if [ -s migrations.sql ]; then
            echo "pending=true" >> $GITHUB_OUTPUT
          else
            echo "pending=false" >> $GITHUB_OUTPUT
          fi

      - name: Install PostgreSQL tools
        if: steps.migrations.outputs.pending == 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-common ca-certificates curl
          sudo sh -c 'echo "deb [signed-by=/usr/share/postgresql-common/pgdg/apt.postgresql.org.asc] https://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" \
            > /etc/apt/sources.list.d/pgdg.list'

          curl -fsSL https://www.postgresql.org/media/keys/ACCC4CF8.asc \
            | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/postgresql.gpg

          sudo apt-get update
          sudo apt-get install -y postgresql-client-17

          # Test pg_dump
          pg_dump --version

      # ✅ Backup DB
      - name: Backup PostgreSQL database
        if: steps.migrations.outputs.pending == 'true'
        run: |
          # Add binPath to PATH for the current session
          #$pgPath = Get-ChildItem 'C:\Program Files\PostgreSQL' | Sort-Object Name -Descending | Select-Object -First 1
          #$binPath = Join-Path $pgPath.FullName 'bin'
          #$env:PATH = "$binPath;$env:PATH"

          export PGPASSWORD="${{ secrets.AZURE_DB_PASSWORD }}"
          TIMESTAMP=$(date +'%Y%m%d%H%M')
          pg_dump \
            --host="${{ secrets.AZURE_DB_HOST }}" \
            --username="${{ secrets.AZURE_DB_USER }}" \
            --dbname="${{ secrets.AZURE_DB_NAME }}" \
            --format=custom \
            --file="backup_${TIMESTAMP}.dump"

          echo "BACKUP_FILE=backup_${TIMESTAMP}.dump" >> $GITHUB_ENV

      - name: Upload backup to Azure Blob
        if: steps.migrations.outputs.pending == 'true'
        uses: azure/CLI@v2
        with:
          inlineScript: |
            az storage blob upload \
              --account-name "${{ secrets.STORAGE_ACCOUNT }}" \
              --container-name db-backups \
              --name "$BACKUP_FILE" \
              --file "$BACKUP_FILE" \
              --auth-mode key \
              --account-key "${{ secrets.STORAGE_KEY }}"

      # ✅ Apply migrations
      - name: Apply EF Core migrations
        if: steps.migrations.outputs.pending == 'true'
        run: |
          export DOTNET_CONNECTIONSTRING="Host=${{ secrets.AZURE_DB_HOST }};Database=${{ secrets.AZURE_DB_NAME }};Username=${{ secrets.AZURE_DB_USER }};Password=${{ secrets.AZURE_DB_PASSWORD }};Ssl Mode=Require;Trust Server Certificate=true"
          dotnet ef --project backend/Backend/Backend.csproj database update

      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: .net-app

      - name: dotnet publish
        run: dotnet publish backend/Backend -c Release -o publish
      
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_7A381B7694AE46BAA4F949F9CEE439E8 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_167812655C614B57BE44E4AECBADFD1F }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_BB25C7AB8A5B443CADF01DB91FD1330E }}

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'smart-meal-planner-backend'
          slot-name: 'Production'
          package: ./publish